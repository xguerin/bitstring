{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Copyright (C) 2008-2016 Red Hat Inc, Richard W.M. Jones. Copyright (C) 2016-2022 Red Hat Inc, Richard W.M. Jones, Xavier R. Gu\u00e9rin. How to install opam install bitstring opam install ppx_bitstring How to use Ocamlfind ocamlfind c -package bitstring -package ppx_bitstring -linkpkg ... Dune (executable ((name foo) (libraries (bitstring)) (preprocess (pps ppx_bitstring)) )) How to build Building the project $ dune build Running the tests $ dune runtest License The library is licensed under the LGPL v2 or later, with the OCaml linking exception. See the file COPYING.LIB for full terms. Programs are licensed under the GPL v2 or later. see the file copying for full terms. All examples and tests are public domain.","title":"Overview"},{"location":"#overview","text":"Copyright (C) 2008-2016 Red Hat Inc, Richard W.M. Jones. Copyright (C) 2016-2022 Red Hat Inc, Richard W.M. Jones, Xavier R. Gu\u00e9rin.","title":"Overview"},{"location":"#how-to-install","text":"opam install bitstring opam install ppx_bitstring","title":"How to install"},{"location":"#how-to-use","text":"","title":"How to use"},{"location":"#ocamlfind","text":"ocamlfind c -package bitstring -package ppx_bitstring -linkpkg ...","title":"Ocamlfind"},{"location":"#dune","text":"(executable ((name foo) (libraries (bitstring)) (preprocess (pps ppx_bitstring)) ))","title":"Dune"},{"location":"#how-to-build","text":"","title":"How to build"},{"location":"#building-the-project","text":"$ dune build","title":"Building the project"},{"location":"#running-the-tests","text":"$ dune runtest","title":"Running the tests"},{"location":"#license","text":"The library is licensed under the LGPL v2 or later, with the OCaml linking exception. See the file COPYING.LIB for full terms. Programs are licensed under the GPL v2 or later. see the file copying for full terms. All examples and tests are public domain.","title":"License"},{"location":"documentation/","text":"Guide Loading, creating bitstrings The basic data type is the Bitstring.bitstring , a string of bits of arbitrary length. Bitstrings can be any length in bits and operations do not need to be byte-aligned (although they will generally be more efficient if they are byte-aligned). Internally a bitstring is stored as a normal OCaml string together with an offset and length, where the offset and length are measured in bits. Thus one can efficiently form substrings of bitstrings, overlay a bitstring on existing data, and load and save bitstrings from files or other external sources. To load a bitstring from a file use Bitstring.bitstring_of_file or Bitstring.bitstring_of_chan . There are also functions to create bitstrings from arbitrary data. See the reference section. Matching bitstrings with patterns Use the bitstring extension of the match operator (part of the syntax extension) to break apart a bitstring into its fields. match%bitstring works a lot like the OCaml match operator. Please note the use of the {| ... |} verbatim notation for the matching patterns. The general form of match%bitstring is: match%bitstring EXPRESSION with | {| PATTERN |} -> CODE | {| PATTERN |} -> CODE | ... As with normal match, the statement attempts to match the bitstring against each pattern in turn. If none of the patterns match then the standard library Match_failure exception is thrown. Patterns look a bit different from normal match patterns. They consist of a list of bitfields separated by ; where each bitfield contains a bind variable, the width (in bits) of the field, and other information. Some example patterns: match%bitstring bits with | {| version : 8; name : 8; param : 8 |} -> ... (* Bitstring of at least 3 bytes. First byte is the version number, second byte is a field called name, third byte is a field called parameter. *) | {| flag : 1 |} -> printf \"flag is %b\\n\" flag (* A single flag bit (mapped into an OCaml boolean). *) | {| len : 4; data : 1 + len |} -> printf \"len = %d, data = 0x%Lx\\n\" len data (* A 4-bit length, followed by 1-16 bits of data, where the length of the data is computed from len. *) | {| ipv6_source : 128 : bitstring; ipv6_dest : 128 : bitstring |} -> ... (* IPv6 source and destination addresses. Each is 128 bits and is mapped into a bitstring type which will be a substring of the main bitstring expression. *) You can also add conditional when-clauses: | {| version : 4 |} when version = 4 || version = 6 -> ... (* Only match and run the code when version is 4 or 6. If it isn't we will drop through to the next case. *) Note that the pattern is only compared against the first part of the bitstring (there may be more data in the bitstring following the pattern, which is not matched). In terms of regular expressions you might say that the pattern matches ^pattern , not ^pattern$ . To ensure that the bitstring contains only the pattern, add a length -1 bitstring to the end and test that its length is zero in the when-clause: | {| n : 4; rest : -1 : bitstring |} when Bitstring.bitstring_length rest = 0 -> ... (* Only matches exactly 4 bits. *) Normally the first part of each field is a binding variable, but you can also match a constant, as in: | {| (4|6) : 4 |} -> ... (* Only matches if the first 4 bits contain either the integer 4 or the integer 6. *) One may also match on strings: | {| \"MAGIC\" : 5*8 : string |} -> ... (* Only matches if the string \"MAGIC\" appears at the start of the input. *) Pattern field reference The exact format of each pattern field is: pattern : length [: qualifier [,qualifier ...]] pattern is the pattern, binding variable name, or constant to match. length is the length in bits which may be either a constant or an expression. The length expression is just an OCaml expression and can use any values defined in the program, and refer back to earlier fields (but not to later fields). Integers can only have lengths in the range [1..64] bits. See the integer types section below for how these are mapped to the OCaml int / int32 / int64 types. This is checked at compile time if the length expression is constant, otherwise it is checked at runtime and you will get a runtime exception eg. in the case of a computed length expression. A bitstring field of length -1 matches all the rest of the bitstring (thus this is only useful as the last field in a pattern). A bitstring field of length 0 matches an empty bitstring (occasionally useful when matching optional subfields). Qualifiers are a list of identifiers/expressions which control the type, signedness and endianness of the field. Permissible qualifiers are: Qualifier Description int field has an integer type string field is a string type bitstring field is a bitstring type signed field is signed unsigned field is unsigned bigendian field is big endian - a.k.a network byte order littleendian field is little endian - a.k.a Intel byte order nativeendian field is same endianness as the machine endian(expr) expr should be an expression which evaluates to a Bitstring.endian type offset(expr) see computed offsets below check(expr) apply some constraint to the field bind(expr) bind the field to expr map(lambda) apply lambda to the field Bitstring.endian is either LittleEndian , BigEndian or NativeEndian . The expression in endian(expr) is an arbitrary OCaml expression and can use the value of earlier fields in the bitmatch. The default settings are int , unsigned , bigendian , no offset. Note that many of these qualifiers cannot be used together, eg. bitstrings do not have endianness. The syntax extension should give you a compile-time error if you use incompatible qualifiers. Default match cases As well as a list of fields, it is possible to name the bitstring and/or have a default match case: | {| _ |} -> ... (* Default match case. *) | {| _ |} as pkt -> ... (* Default match case, with 'pkt' bound to the whole bitstring. *) Function definition The function keyword can also be used for pattern matching: let pattern_matcher = function%bitstring | {| false : 1 ; a : 2 ; b : 16 : bigendian ; ... |} -> (* Do something *) | {| _ |} -> (* Do something else *) Constructing bitstrings Bitstrings may be constructed using the bitstring extension of the let keyword. The let%bitstring expression takes a list of fields, similar to the list of fields for matching: let version = 1 ;; let data = 10 ;; let%bitstring bits = {| version : 4; data : 12 |} ;; (* Constructs a 16-bit bitstring with the first four bits containing the integer 1, and the following 12 bits containing the integer 10, arranged in network byte order. *) Bitstring.hexdump_bitstring stdout bits ;; (* Prints: 00000000 10 0a |.. | *) The format of each field is the same as for pattern fields (see Pattern field reference section ), and things like computed length fields, fixed value fields, insertion of bitstrings within bitstrings, etc. are all supported. Construction exception The let%bitstring expression may throw a Bitstring.Construct_failure exception at runtime. Runtime errors include: int field length not in the range [1..64] a bitstring with a length declared which doesn't have the same length at runtime trying to insert an out-of-range value into an int field Integer types Integer types are mapped to OCaml types bool , int , int32 or int64 using a system which tries to ensure that (a) the types are reasonably predictable and (b) the most efficient type is preferred. The rules are slightly different depending on whether the bit length expression in the field is a compile-time constant or a computed expression. Detection of compile-time constants is quite simplistic so only simple integer literals and simple expressions (eg. 5 * 8 ) are recognized as constants. In any case the bit size of an integer is limited to the range [1..64] . This is detected as a compile-time error if that is possible, otherwise a runtime check is added which can throw an Invalid_argument exception. The mapping is thus: Bit size Constant Computed expression 1 bool int64 2..31 int int64 32 int32 int64 33..64 int64 int64 A possible future extension may allow people with 64 bit computers to specify a more optimal int type for bit sizes in the range 32..63 . If this was implemented then such code could not even be compiled on 32 bit platforms, so it would limit portability. Another future extension may be to allow computed expressions to assert min/max range for the bit size, allowing a more efficient data type than int64 to be used. (Of course under such circumstances there would still need to be a runtime check to enforce the size). Advanced pattern-matching Computed offsets You can add an offset(..) qualifier to bitmatch patterns in order to move the current offset within the bitstring forwards. For example: match%bitstring bits with | {| field1 : 8; field2 : 8 : offset(160) |} -> ... matches field1 at the start of the bitstring and field2 at 160 bits into the bitstring. The middle 152 bits go unmatched (ie. can be anything). The generated code is efficient. If field lengths and offsets are known to be constant at compile time, then almost all runtime checks are avoided. Non-constant field lengths and/or non-constant offsets can result in more runtime checks being added. Note that moving the offset backwards, and moving the offset in let%bitstring expressions, are both not supported at present. Check expressions You can add a check(expr) qualifier to bitmatch patterns. If the expression evaluates to false then the current match case fails to match (in other words, we fall through to the next match case - there is no error). For example: match%bitstring bits with | { field : 16 : check (field > 100) } -> ... Note the difference between a check expression and a when-clause is that the when-clause is evaluated after all the fields have been matched. On the other hand a check expression is evaluated after the individual field has been matched, which means it is potentially more efficient (if the check expression fails then we don't waste any time matching later fields). We wanted to use the notation when(expr) here, but because when is a reserved word we could not do this. Bind expressions A bind expression is used to change the value of a matched field. For example: match%bitstring bits with | { len : 16 : bind (len * 8); field : len : bitstring } -> ... In the example, after 'len' has been matched, its value would be multiplied by 8, so the width of 'field' is the matched value multiplied by 8. In the general case: | { field : ... : bind (expr) } -> ... evaluates the following after the field has been matched: let field = expr in (* remaining fields *) Map expressions A map expression is used to apply a lambda expression to a matched field. The matched field would then contain the result of the application: {| field : size : map (fun v -> do_something_with v) }| evaluates the following after the field has been matched: let field = (fun v -> do_something_with v) temporary_parsed_field in (* remaining fields *) Order of evaluation The choice is arbitrary, but we have chosen that check expressions are evaluated first, and bind/map expressions are evaluated after. This means that the result of bind() or map() is not available in the check expression. Note that this rule applies regardless of the order of check() , bind() , or map() in the source code. Saving bit offsets Use save_offset_to(variable) to save the current bit offset within the match to a variable (strictly speaking, to a pattern). This variable is then made available in any check() and bind() clauses in the current field, and to any later fields, and to the code after the -> . For example: match%bitstring bits with | {| len : 16; _ : len : bitstring; field : 16 : save_offset_to (field_offset) |} -> printf \"field is at bit offset %d in the match\\n\" field_offset (In that example, field_offset should always have the value len+16 ). Security and type safety Security on input The main concerns for input are buffer overflows and denial of service. It is believed that this library is robust against attempted buffer overflows. In addition to OCaml's normal bounds checks, we check that field lengths are >= 0, and many additional checks. Denial of service attacks are more problematic. We only work forwards through the bitstring, thus computation will eventually terminate. As for computed lengths, code such as this is thought to be secure: match%bitstring bits with | {| len : 64; buffer : Int64.to_int len : bitstring |} -> ... The len field can be set arbitrarily large by an attacker, but when pattern-matching against the buffer field this merely causes a test such as if len <= remaining_size to fail. Even if the length is chosen so that buffer bitstring is allocated, the allocation of sub-bitstrings is efficient and doesn't involve an arbitary-sized allocation or any copying. However the above does not necessarily apply to strings used in matching, since they may cause the library to use the Bitstring.string_of_bitstring function, which allocates a string. So you should take care if you use the string type particularly with a computed length that is derived from external input. The main protection against attackers should be to ensure that the main program will only read input bitstrings up to a certain length, which is outside the scope of this library. Security on output As with the input side, computed lengths are believed to be safe. For example: let len = read_untrusted_source () in let buffer = allocate_bitstring () in [%bitstring {| buffer : len : bitstring |}] This code merely causes a check that buffer's length is the same as len . However the program function allocate_bitstring must refuse to allocate an oversized buffer (but that is outside the scope of this library). Order of evaluation In match%bitstring statements, fields are evaluated left to right. Note that the when-clause is evaluated last , so if you are relying on the when-clause to filter cases then your code may do a lot of extra and unncessary pattern-matching work on fields which may never be needed just to evaluate the when-clause. Either rearrange the code to do only the first part of the match, followed by the when-clause, followed by a second inner bitmatch, or use a check() qualifier within fields. Safety The current implementation is believed to be fully type-safe, and makes compile and run-time checks where appropriate. If you find a case where a check is missing please submit a bug report or a patch. Limits These are thought to be the current limits: Integers: [1..64] bits. Bitstrings (32-bit): maximum length is limited by the string size, ie. 16 MBytes. Bitstrings (64-bit): maximum length is thought to be limited by the string size, ie. effectively unlimited. Bitstrings must be loaded into memory before we can match against them. Thus available memory may be considered a limit for some applications.","title":"Guide"},{"location":"documentation/#guide","text":"","title":"Guide"},{"location":"documentation/#loading-creating-bitstrings","text":"The basic data type is the Bitstring.bitstring , a string of bits of arbitrary length. Bitstrings can be any length in bits and operations do not need to be byte-aligned (although they will generally be more efficient if they are byte-aligned). Internally a bitstring is stored as a normal OCaml string together with an offset and length, where the offset and length are measured in bits. Thus one can efficiently form substrings of bitstrings, overlay a bitstring on existing data, and load and save bitstrings from files or other external sources. To load a bitstring from a file use Bitstring.bitstring_of_file or Bitstring.bitstring_of_chan . There are also functions to create bitstrings from arbitrary data. See the reference section.","title":"Loading, creating bitstrings"},{"location":"documentation/#matching-bitstrings-with-patterns","text":"Use the bitstring extension of the match operator (part of the syntax extension) to break apart a bitstring into its fields. match%bitstring works a lot like the OCaml match operator. Please note the use of the {| ... |} verbatim notation for the matching patterns. The general form of match%bitstring is: match%bitstring EXPRESSION with | {| PATTERN |} -> CODE | {| PATTERN |} -> CODE | ... As with normal match, the statement attempts to match the bitstring against each pattern in turn. If none of the patterns match then the standard library Match_failure exception is thrown. Patterns look a bit different from normal match patterns. They consist of a list of bitfields separated by ; where each bitfield contains a bind variable, the width (in bits) of the field, and other information. Some example patterns: match%bitstring bits with | {| version : 8; name : 8; param : 8 |} -> ... (* Bitstring of at least 3 bytes. First byte is the version number, second byte is a field called name, third byte is a field called parameter. *) | {| flag : 1 |} -> printf \"flag is %b\\n\" flag (* A single flag bit (mapped into an OCaml boolean). *) | {| len : 4; data : 1 + len |} -> printf \"len = %d, data = 0x%Lx\\n\" len data (* A 4-bit length, followed by 1-16 bits of data, where the length of the data is computed from len. *) | {| ipv6_source : 128 : bitstring; ipv6_dest : 128 : bitstring |} -> ... (* IPv6 source and destination addresses. Each is 128 bits and is mapped into a bitstring type which will be a substring of the main bitstring expression. *) You can also add conditional when-clauses: | {| version : 4 |} when version = 4 || version = 6 -> ... (* Only match and run the code when version is 4 or 6. If it isn't we will drop through to the next case. *) Note that the pattern is only compared against the first part of the bitstring (there may be more data in the bitstring following the pattern, which is not matched). In terms of regular expressions you might say that the pattern matches ^pattern , not ^pattern$ . To ensure that the bitstring contains only the pattern, add a length -1 bitstring to the end and test that its length is zero in the when-clause: | {| n : 4; rest : -1 : bitstring |} when Bitstring.bitstring_length rest = 0 -> ... (* Only matches exactly 4 bits. *) Normally the first part of each field is a binding variable, but you can also match a constant, as in: | {| (4|6) : 4 |} -> ... (* Only matches if the first 4 bits contain either the integer 4 or the integer 6. *) One may also match on strings: | {| \"MAGIC\" : 5*8 : string |} -> ... (* Only matches if the string \"MAGIC\" appears at the start of the input. *)","title":"Matching bitstrings with patterns"},{"location":"documentation/#pattern-field-reference","text":"The exact format of each pattern field is: pattern : length [: qualifier [,qualifier ...]] pattern is the pattern, binding variable name, or constant to match. length is the length in bits which may be either a constant or an expression. The length expression is just an OCaml expression and can use any values defined in the program, and refer back to earlier fields (but not to later fields). Integers can only have lengths in the range [1..64] bits. See the integer types section below for how these are mapped to the OCaml int / int32 / int64 types. This is checked at compile time if the length expression is constant, otherwise it is checked at runtime and you will get a runtime exception eg. in the case of a computed length expression. A bitstring field of length -1 matches all the rest of the bitstring (thus this is only useful as the last field in a pattern). A bitstring field of length 0 matches an empty bitstring (occasionally useful when matching optional subfields). Qualifiers are a list of identifiers/expressions which control the type, signedness and endianness of the field. Permissible qualifiers are: Qualifier Description int field has an integer type string field is a string type bitstring field is a bitstring type signed field is signed unsigned field is unsigned bigendian field is big endian - a.k.a network byte order littleendian field is little endian - a.k.a Intel byte order nativeendian field is same endianness as the machine endian(expr) expr should be an expression which evaluates to a Bitstring.endian type offset(expr) see computed offsets below check(expr) apply some constraint to the field bind(expr) bind the field to expr map(lambda) apply lambda to the field Bitstring.endian is either LittleEndian , BigEndian or NativeEndian . The expression in endian(expr) is an arbitrary OCaml expression and can use the value of earlier fields in the bitmatch. The default settings are int , unsigned , bigendian , no offset. Note that many of these qualifiers cannot be used together, eg. bitstrings do not have endianness. The syntax extension should give you a compile-time error if you use incompatible qualifiers.","title":"Pattern field reference"},{"location":"documentation/#default-match-cases","text":"As well as a list of fields, it is possible to name the bitstring and/or have a default match case: | {| _ |} -> ... (* Default match case. *) | {| _ |} as pkt -> ... (* Default match case, with 'pkt' bound to the whole bitstring. *)","title":"Default match cases"},{"location":"documentation/#function-definition","text":"The function keyword can also be used for pattern matching: let pattern_matcher = function%bitstring | {| false : 1 ; a : 2 ; b : 16 : bigendian ; ... |} -> (* Do something *) | {| _ |} -> (* Do something else *)","title":"Function definition"},{"location":"documentation/#constructing-bitstrings","text":"Bitstrings may be constructed using the bitstring extension of the let keyword. The let%bitstring expression takes a list of fields, similar to the list of fields for matching: let version = 1 ;; let data = 10 ;; let%bitstring bits = {| version : 4; data : 12 |} ;; (* Constructs a 16-bit bitstring with the first four bits containing the integer 1, and the following 12 bits containing the integer 10, arranged in network byte order. *) Bitstring.hexdump_bitstring stdout bits ;; (* Prints: 00000000 10 0a |.. | *) The format of each field is the same as for pattern fields (see Pattern field reference section ), and things like computed length fields, fixed value fields, insertion of bitstrings within bitstrings, etc. are all supported.","title":"Constructing bitstrings"},{"location":"documentation/#construction-exception","text":"The let%bitstring expression may throw a Bitstring.Construct_failure exception at runtime. Runtime errors include: int field length not in the range [1..64] a bitstring with a length declared which doesn't have the same length at runtime trying to insert an out-of-range value into an int field","title":"Construction exception"},{"location":"documentation/#integer-types","text":"Integer types are mapped to OCaml types bool , int , int32 or int64 using a system which tries to ensure that (a) the types are reasonably predictable and (b) the most efficient type is preferred. The rules are slightly different depending on whether the bit length expression in the field is a compile-time constant or a computed expression. Detection of compile-time constants is quite simplistic so only simple integer literals and simple expressions (eg. 5 * 8 ) are recognized as constants. In any case the bit size of an integer is limited to the range [1..64] . This is detected as a compile-time error if that is possible, otherwise a runtime check is added which can throw an Invalid_argument exception. The mapping is thus: Bit size Constant Computed expression 1 bool int64 2..31 int int64 32 int32 int64 33..64 int64 int64 A possible future extension may allow people with 64 bit computers to specify a more optimal int type for bit sizes in the range 32..63 . If this was implemented then such code could not even be compiled on 32 bit platforms, so it would limit portability. Another future extension may be to allow computed expressions to assert min/max range for the bit size, allowing a more efficient data type than int64 to be used. (Of course under such circumstances there would still need to be a runtime check to enforce the size).","title":"Integer types"},{"location":"documentation/#advanced-pattern-matching","text":"","title":"Advanced pattern-matching"},{"location":"documentation/#computed-offsets","text":"You can add an offset(..) qualifier to bitmatch patterns in order to move the current offset within the bitstring forwards. For example: match%bitstring bits with | {| field1 : 8; field2 : 8 : offset(160) |} -> ... matches field1 at the start of the bitstring and field2 at 160 bits into the bitstring. The middle 152 bits go unmatched (ie. can be anything). The generated code is efficient. If field lengths and offsets are known to be constant at compile time, then almost all runtime checks are avoided. Non-constant field lengths and/or non-constant offsets can result in more runtime checks being added. Note that moving the offset backwards, and moving the offset in let%bitstring expressions, are both not supported at present.","title":"Computed offsets"},{"location":"documentation/#check-expressions","text":"You can add a check(expr) qualifier to bitmatch patterns. If the expression evaluates to false then the current match case fails to match (in other words, we fall through to the next match case - there is no error). For example: match%bitstring bits with | { field : 16 : check (field > 100) } -> ... Note the difference between a check expression and a when-clause is that the when-clause is evaluated after all the fields have been matched. On the other hand a check expression is evaluated after the individual field has been matched, which means it is potentially more efficient (if the check expression fails then we don't waste any time matching later fields). We wanted to use the notation when(expr) here, but because when is a reserved word we could not do this.","title":"Check expressions"},{"location":"documentation/#bind-expressions","text":"A bind expression is used to change the value of a matched field. For example: match%bitstring bits with | { len : 16 : bind (len * 8); field : len : bitstring } -> ... In the example, after 'len' has been matched, its value would be multiplied by 8, so the width of 'field' is the matched value multiplied by 8. In the general case: | { field : ... : bind (expr) } -> ... evaluates the following after the field has been matched: let field = expr in (* remaining fields *)","title":"Bind expressions"},{"location":"documentation/#map-expressions","text":"A map expression is used to apply a lambda expression to a matched field. The matched field would then contain the result of the application: {| field : size : map (fun v -> do_something_with v) }| evaluates the following after the field has been matched: let field = (fun v -> do_something_with v) temporary_parsed_field in (* remaining fields *)","title":"Map expressions"},{"location":"documentation/#order-of-evaluation","text":"The choice is arbitrary, but we have chosen that check expressions are evaluated first, and bind/map expressions are evaluated after. This means that the result of bind() or map() is not available in the check expression. Note that this rule applies regardless of the order of check() , bind() , or map() in the source code.","title":"Order of evaluation"},{"location":"documentation/#saving-bit-offsets","text":"Use save_offset_to(variable) to save the current bit offset within the match to a variable (strictly speaking, to a pattern). This variable is then made available in any check() and bind() clauses in the current field, and to any later fields, and to the code after the -> . For example: match%bitstring bits with | {| len : 16; _ : len : bitstring; field : 16 : save_offset_to (field_offset) |} -> printf \"field is at bit offset %d in the match\\n\" field_offset (In that example, field_offset should always have the value len+16 ).","title":"Saving bit offsets"},{"location":"documentation/#security-and-type-safety","text":"","title":"Security and type safety"},{"location":"documentation/#security-on-input","text":"The main concerns for input are buffer overflows and denial of service. It is believed that this library is robust against attempted buffer overflows. In addition to OCaml's normal bounds checks, we check that field lengths are >= 0, and many additional checks. Denial of service attacks are more problematic. We only work forwards through the bitstring, thus computation will eventually terminate. As for computed lengths, code such as this is thought to be secure: match%bitstring bits with | {| len : 64; buffer : Int64.to_int len : bitstring |} -> ... The len field can be set arbitrarily large by an attacker, but when pattern-matching against the buffer field this merely causes a test such as if len <= remaining_size to fail. Even if the length is chosen so that buffer bitstring is allocated, the allocation of sub-bitstrings is efficient and doesn't involve an arbitary-sized allocation or any copying. However the above does not necessarily apply to strings used in matching, since they may cause the library to use the Bitstring.string_of_bitstring function, which allocates a string. So you should take care if you use the string type particularly with a computed length that is derived from external input. The main protection against attackers should be to ensure that the main program will only read input bitstrings up to a certain length, which is outside the scope of this library.","title":"Security on input"},{"location":"documentation/#security-on-output","text":"As with the input side, computed lengths are believed to be safe. For example: let len = read_untrusted_source () in let buffer = allocate_bitstring () in [%bitstring {| buffer : len : bitstring |}] This code merely causes a check that buffer's length is the same as len . However the program function allocate_bitstring must refuse to allocate an oversized buffer (but that is outside the scope of this library).","title":"Security on output"},{"location":"documentation/#order-of-evaluation_1","text":"In match%bitstring statements, fields are evaluated left to right. Note that the when-clause is evaluated last , so if you are relying on the when-clause to filter cases then your code may do a lot of extra and unncessary pattern-matching work on fields which may never be needed just to evaluate the when-clause. Either rearrange the code to do only the first part of the match, followed by the when-clause, followed by a second inner bitmatch, or use a check() qualifier within fields.","title":"Order of evaluation"},{"location":"documentation/#safety","text":"The current implementation is believed to be fully type-safe, and makes compile and run-time checks where appropriate. If you find a case where a check is missing please submit a bug report or a patch.","title":"Safety"},{"location":"documentation/#limits","text":"These are thought to be the current limits: Integers: [1..64] bits. Bitstrings (32-bit): maximum length is limited by the string size, ie. 16 MBytes. Bitstrings (64-bit): maximum length is thought to be limited by the string size, ie. effectively unlimited. Bitstrings must be loaded into memory before we can match against them. Thus available memory may be considered a limit for some applications.","title":"Limits"},{"location":"examples/","text":"Examples IPv4 packets match%bitstring pkt with (* IPv4 packet header 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | 4 | IHL |Type of Service| Total Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Identification |Flags| Fragment Offset | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Time to Live | Protocol | Header Checksum | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Source Address | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Destination Address | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Options | Padding | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *) | {| 4 : 4; hdrlen : 4; tos : 8; length : 16; identification : 16; flags : 3; fragoffset : 13; ttl : 8; protocol : 8; checksum : 16; source : 32; dest : 32; options : (hdrlen-5)*32 : bitstring; payload : -1 : bitstring |} -> printf \"IPv4:\\n\"; printf \" header length: %d * 32 bit words\\n\" hdrlen; printf \" type of service: %d\\n\" tos; printf \" packet length: %d bytes\\n\" length; printf \" identification: %d\\n\" identification; printf \" flags: %d\\n\" flags; printf \" fragment offset: %d\\n\" fragoffset; printf \" ttl: %d\\n\" ttl; printf \" protocol: %d\\n\" protocol; printf \" checksum: %d\\n\" checksum; printf \" source: %lx dest: %lx\\n\" source dest; printf \" header options + padding:\\n\"; Bitstring.hexdump_bitstring stdout options; printf \" packet payload:\\n\"; Bitstring.hexdump_bitstring stdout payload | {| version : 4 |} -> eprintf \"unknown IP version %d\\n\" version; exit 1 | {| _ |} as pkt -> eprintf \"data is smaller than one nibble:\\n\"; Bitstring.hexdump_bitstring stderr pkt; exit 1 EXT3 superblock parser let bits = Bitstring.bitstring_of_file \"tests/ext3_sb\" let () = match%bitstring bits with | {| s_inodes_count : 32 : littleendian; (* Inodes count *) s_blocks_count : 32 : littleendian; (* Blocks count *) s_r_blocks_count : 32 : littleendian; (* Reserved blocks count *) s_free_blocks_count : 32 : littleendian; (* Free blocks count *) s_free_inodes_count : 32 : littleendian; (* Free inodes count *) s_first_data_block : 32 : littleendian; (* First Data Block *) s_log_block_size : 32 : littleendian; (* Block size *) s_log_frag_size : 32 : littleendian; (* Fragment size *) s_blocks_per_group : 32 : littleendian; (* # Blocks per group *) s_frags_per_group : 32 : littleendian; (* # Fragments per group *) s_inodes_per_group : 32 : littleendian; (* # Inodes per group *) s_mtime : 32 : littleendian; (* Mount time *) s_wtime : 32 : littleendian; (* Write time *) s_mnt_count : 16 : littleendian; (* Mount count *) s_max_mnt_count : 16 : littleendian; (* Maximal mount count *) 0xef53 : 16 : littleendian |} -> (* Magic signature *) printf \"ext3 superblock:\\n\"; printf \" s_inodes_count = %ld\\n\" s_inodes_count; printf \" s_blocks_count = %ld\\n\" s_blocks_count; printf \" s_free_inodes_count = %ld\\n\" s_free_inodes_count; printf \" s_free_blocks_count = %ld\\n\" s_free_blocks_count | {| _ |} -> eprintf \"not an ext3 superblock!\\n%!\"; exit 2 Simple binary message parser (* +---------------+---------------+--------------------------+ | type | subtype | parameter | +---------------+---------------+--------------------------+ <-- 16 bits --> <-- 16 bits --> <------- 32 bits --------> All fields are in network byte order. *) let%bitstring make_message typ subtype param = {| typ : 16; subtype : 16; param : 32 |};;","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#ipv4-packets","text":"match%bitstring pkt with (* IPv4 packet header 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | 4 | IHL |Type of Service| Total Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Identification |Flags| Fragment Offset | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Time to Live | Protocol | Header Checksum | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Source Address | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Destination Address | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Options | Padding | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ *) | {| 4 : 4; hdrlen : 4; tos : 8; length : 16; identification : 16; flags : 3; fragoffset : 13; ttl : 8; protocol : 8; checksum : 16; source : 32; dest : 32; options : (hdrlen-5)*32 : bitstring; payload : -1 : bitstring |} -> printf \"IPv4:\\n\"; printf \" header length: %d * 32 bit words\\n\" hdrlen; printf \" type of service: %d\\n\" tos; printf \" packet length: %d bytes\\n\" length; printf \" identification: %d\\n\" identification; printf \" flags: %d\\n\" flags; printf \" fragment offset: %d\\n\" fragoffset; printf \" ttl: %d\\n\" ttl; printf \" protocol: %d\\n\" protocol; printf \" checksum: %d\\n\" checksum; printf \" source: %lx dest: %lx\\n\" source dest; printf \" header options + padding:\\n\"; Bitstring.hexdump_bitstring stdout options; printf \" packet payload:\\n\"; Bitstring.hexdump_bitstring stdout payload | {| version : 4 |} -> eprintf \"unknown IP version %d\\n\" version; exit 1 | {| _ |} as pkt -> eprintf \"data is smaller than one nibble:\\n\"; Bitstring.hexdump_bitstring stderr pkt; exit 1","title":"IPv4 packets"},{"location":"examples/#ext3-superblock-parser","text":"let bits = Bitstring.bitstring_of_file \"tests/ext3_sb\" let () = match%bitstring bits with | {| s_inodes_count : 32 : littleendian; (* Inodes count *) s_blocks_count : 32 : littleendian; (* Blocks count *) s_r_blocks_count : 32 : littleendian; (* Reserved blocks count *) s_free_blocks_count : 32 : littleendian; (* Free blocks count *) s_free_inodes_count : 32 : littleendian; (* Free inodes count *) s_first_data_block : 32 : littleendian; (* First Data Block *) s_log_block_size : 32 : littleendian; (* Block size *) s_log_frag_size : 32 : littleendian; (* Fragment size *) s_blocks_per_group : 32 : littleendian; (* # Blocks per group *) s_frags_per_group : 32 : littleendian; (* # Fragments per group *) s_inodes_per_group : 32 : littleendian; (* # Inodes per group *) s_mtime : 32 : littleendian; (* Mount time *) s_wtime : 32 : littleendian; (* Write time *) s_mnt_count : 16 : littleendian; (* Mount count *) s_max_mnt_count : 16 : littleendian; (* Maximal mount count *) 0xef53 : 16 : littleendian |} -> (* Magic signature *) printf \"ext3 superblock:\\n\"; printf \" s_inodes_count = %ld\\n\" s_inodes_count; printf \" s_blocks_count = %ld\\n\" s_blocks_count; printf \" s_free_inodes_count = %ld\\n\" s_free_inodes_count; printf \" s_free_blocks_count = %ld\\n\" s_free_blocks_count | {| _ |} -> eprintf \"not an ext3 superblock!\\n%!\"; exit 2","title":"EXT3 superblock parser"},{"location":"examples/#simple-binary-message-parser","text":"(* +---------------+---------------+--------------------------+ | type | subtype | parameter | +---------------+---------------+--------------------------+ <-- 16 bits --> <-- 16 bits --> <------- 32 bits --------> All fields are in network byte order. *) let%bitstring make_message typ subtype param = {| typ : 16; subtype : 16; param : 32 |};;","title":"Simple binary message parser"},{"location":"reference/","text":"Reference Types type endian = | BigEndian | LittleEndian | NativeEndian val string_of_endian : endian -> string Endianness. type bitstring = string * int * int bitstring is the basic type used to store bitstrings. The type contains the underlying data (a string), the current bit offset within the string and the current bit length of the string (counting from the bit offset). Note that the offset and length are in bits, not bytes. Normally you don't need to use the bitstring type directly, since there are functions and syntax extensions which hide the details. See also Bitstring.bitstring_of_string , Bitstring.bitstring_of_file , Bitstring.hexdump_bitstring , Bitstring.bitstring_length . type t = bitstring t is a synonym for the Bitstring.bitstring type . This allows you to use this module with functors like Set and Map from the stdlib. Exceptions exception Construct_failure of string * string * int * int Construct_failure (message, file, line, char) may be raised by the BITSTRING constructor. Common reasons are that values are out of range of the fields that contain them, or that computed lengths are impossible (eg. negative length bitfields). message is the error message. file , line and char point to the original source location of the BITSTRING constructor that failed. Bitstring comparison val compare : bitstring -> bitstring -> int compare bs1 bs2 compares two bitstrings and returns zero if they are equal, a negative number if bs1 < bs2, or a positive number if bs1 > bs2. This tests \"semantic equality\" which is not affected by the offset or alignment of the underlying representation (see Bitstring.bitstring ). The ordering is total and lexicographic. val equals : bitstring -> bitstring -> bool equals returns true if and only if the two bitstrings are semantically equal. It is the same as calling compare and testing if the result is 0, but usually more efficient. Bitstring manipulation val bitstring_length : bitstring -> int bitstring_length bitstring returns the length of the bitstring in bits. Note this just returns the third field in the Bitstring.bitstring tuple. val subbitstring : bitstring -> int -> int -> bitstring subbitstring bits off len returns a sub-bitstring of the bitstring, starting at offset off bits and with length len bits. If the original bitstring is not long enough to do this then the function raises Invalid_argument \"subbitstring\" . Note that this function just changes the offset and length fields of the Bitstring.bitstring tuple, so is very efficient. val dropbits : int -> bitstring -> bitstring Drop the first n bits of the bitstring and return a new bitstring which is shorter by n bits. If the length of the original bitstring is less than n bits, this raises Invalid_argument \"dropbits\" . Note that this function just changes the offset and length fields of the Bitstring.bitstring tuple, so is very efficient. val takebits : int -> bitstring -> bitstring Take the first n bits of the bitstring and return a new bitstring which is exactly n bits long. If the length of the original bitstring is less than n bits, this raises Invalid_argument \"takebits\" . Note that this function just changes the offset and length fields of the Bitstring.bitstring tuple, so is very efficient. val concat : bitstring list -> bitstring Concatenate a list of bitstrings together into a single bitstring. Constructing bitstrings val empty_bitstring : bitstring empty_bitstring is the empty, zero-length bitstring. val create_bitstring : int -> bitstring create_bitstring n creates an n bit bitstring containing all zeroes. val make_bitstring : int -> char -> bitstring make_bitstring n c creates an n bit bitstring containing the repeated 8 bit pattern in c. For example, make_bitstring 16 '\\x5a' will create the bitstring 0x5a5a or in binary 0101 1010 0101 1010 . Note that the length is in bits, not bytes. The length does NOT need to be a multiple of 8. val zeroes_bitstring : int -> bitstring zeroes_bitstring creates an n bit bitstring of all 0's. Actually this is the same as Bitstring.create_bitstring . val ones_bitstring : int -> bitstring ones_bitstring creates an n bit bitstring of all 1's. val bitstring_of_string : string -> bitstring bitstring_of_string str creates a bitstring of length String.length str * 8 (bits) containing the bits in str. Note that the bitstring uses str as the underlying string (see the representation of Bitstring.bitstring) so you should not change str after calling this. val bitstring_of_file : string -> bitstring bitstring_of_file filename loads the named file into a bitstring. val bitstring_of_chan : Pervasives.in_channel -> bitstring bitstring_of_chan chan loads the contents of the input channel chan as a bitstring. The length of the final bitstring is determined by the remaining input in chan, but will always be a multiple of 8 bits. See also Bitstring.bitstring_of_chan_max. val bitstring_of_chan_max : Pervasives.in_channel -> int -> bitstring bitstring_of_chan_max chan max works like Bitstring.bitstring_of_chan but will only read up to max bytes from the channel (or fewer if the end of input occurs before that). val bitstring_of_file_descr : Unix.file_descr -> bitstring bitstring_of_file_descr fd loads the contents of the file descriptor fd as a bitstring. See also Bitstring.bitstring_of_chan , Bitstring.bitstring_of_file_descr_max . val bitstring_of_file_descr_max : Unix.file_descr -> int -> bitstring bitstring_of_file_descr_max fd max works like Bitstring.bitstring_of_file_descr but will only read up to max bytes from the channel (or fewer if the end of input occurs before that). Converting bitstrings val string_of_bitstring : bitstring -> string string_of_bitstring bitstring converts a bitstring to a string (eg. to allow comparison). This function is inefficient. In the best case when the bitstring is nicely byte-aligned we do a String.sub operation. If the bitstring isn't aligned then this involves a lot of bit twiddling and is particularly inefficient. If the bitstring is not a multiple of 8 bits wide then the final byte of the string contains the high bits set to the remaining bits and the low bits set to 0. val bitstring_to_file : bitstring -> string -> unit bitstring_to_file bits filename writes the bitstring bits to the file filename. It overwrites the output file. Some restrictions apply, see Bitstring.bitstring_to_chan . val bitstring_to_chan : bitstring -> Pervasives.out_channel -> unit bitstring_to_file bits filename writes the bitstring bits to the channel chan. Channels are made up of bytes, bitstrings can be any bit length including fractions of bytes. So this function only works if the length of the bitstring is an exact multiple of 8 bits (otherwise it raises Invalid_argument \"bitstring_to_chan\" ). Furthermore the function is efficient only in the case where the bitstring is stored fully aligned, otherwise it has to do inefficient bit twiddling like Bitstring.string_of_bitstring . In the common case where the bitstring was generated by the BITSTRING operator and is an exact multiple of 8 bits wide, then this function will always work efficiently. Printing bitstrings val hexdump_bitstring : Pervasives.out_channel -> bitstring -> unit hexdump_bitstring chan bitstring prints the bitstring to the output channel in a format similar to the Unix command hexdump -C . Bitstring buffer module Buffer: sig .. end Buffers are mainly used by the BITSTRING constructor, but may also be useful for end users. Get/set bits These functions let you manipulate individual bits in the bitstring. However they are not particularly efficient and you should generally use the bitmatch and BITSTRING operators when building and parsing bitstrings. These functions all raise Invalid_argument \"index out of bounds\" if the index is out of range of the bitstring. val set : bitstring -> int -> unit set bits n sets the nth bit in the bitstring to 1. val clear : bitstring -> int -> unit clear bits n sets the nth bit in the bitstring to 0. val is_set : bitstring -> int -> bool is_set bits n is true if the nth bit is set to 1. val is_clear : bitstring -> int -> bool is_clear bits n is true if the nth bit is set to 0. val put : bitstring -> int -> int -> unit put bits n v sets the nth bit in the bitstring to 1 if v is not zero, or to 0 if v is zero. val get : bitstring -> int -> int get bits n returns the nth bit (returns non-zero or 0).","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#types","text":"type endian = | BigEndian | LittleEndian | NativeEndian val string_of_endian : endian -> string Endianness. type bitstring = string * int * int bitstring is the basic type used to store bitstrings. The type contains the underlying data (a string), the current bit offset within the string and the current bit length of the string (counting from the bit offset). Note that the offset and length are in bits, not bytes. Normally you don't need to use the bitstring type directly, since there are functions and syntax extensions which hide the details. See also Bitstring.bitstring_of_string , Bitstring.bitstring_of_file , Bitstring.hexdump_bitstring , Bitstring.bitstring_length . type t = bitstring t is a synonym for the Bitstring.bitstring type . This allows you to use this module with functors like Set and Map from the stdlib.","title":"Types"},{"location":"reference/#exceptions","text":"exception Construct_failure of string * string * int * int Construct_failure (message, file, line, char) may be raised by the BITSTRING constructor. Common reasons are that values are out of range of the fields that contain them, or that computed lengths are impossible (eg. negative length bitfields). message is the error message. file , line and char point to the original source location of the BITSTRING constructor that failed.","title":"Exceptions"},{"location":"reference/#bitstring-comparison","text":"val compare : bitstring -> bitstring -> int compare bs1 bs2 compares two bitstrings and returns zero if they are equal, a negative number if bs1 < bs2, or a positive number if bs1 > bs2. This tests \"semantic equality\" which is not affected by the offset or alignment of the underlying representation (see Bitstring.bitstring ). The ordering is total and lexicographic. val equals : bitstring -> bitstring -> bool equals returns true if and only if the two bitstrings are semantically equal. It is the same as calling compare and testing if the result is 0, but usually more efficient.","title":"Bitstring comparison"},{"location":"reference/#bitstring-manipulation","text":"val bitstring_length : bitstring -> int bitstring_length bitstring returns the length of the bitstring in bits. Note this just returns the third field in the Bitstring.bitstring tuple. val subbitstring : bitstring -> int -> int -> bitstring subbitstring bits off len returns a sub-bitstring of the bitstring, starting at offset off bits and with length len bits. If the original bitstring is not long enough to do this then the function raises Invalid_argument \"subbitstring\" . Note that this function just changes the offset and length fields of the Bitstring.bitstring tuple, so is very efficient. val dropbits : int -> bitstring -> bitstring Drop the first n bits of the bitstring and return a new bitstring which is shorter by n bits. If the length of the original bitstring is less than n bits, this raises Invalid_argument \"dropbits\" . Note that this function just changes the offset and length fields of the Bitstring.bitstring tuple, so is very efficient. val takebits : int -> bitstring -> bitstring Take the first n bits of the bitstring and return a new bitstring which is exactly n bits long. If the length of the original bitstring is less than n bits, this raises Invalid_argument \"takebits\" . Note that this function just changes the offset and length fields of the Bitstring.bitstring tuple, so is very efficient. val concat : bitstring list -> bitstring Concatenate a list of bitstrings together into a single bitstring.","title":"Bitstring manipulation"},{"location":"reference/#constructing-bitstrings","text":"val empty_bitstring : bitstring empty_bitstring is the empty, zero-length bitstring. val create_bitstring : int -> bitstring create_bitstring n creates an n bit bitstring containing all zeroes. val make_bitstring : int -> char -> bitstring make_bitstring n c creates an n bit bitstring containing the repeated 8 bit pattern in c. For example, make_bitstring 16 '\\x5a' will create the bitstring 0x5a5a or in binary 0101 1010 0101 1010 . Note that the length is in bits, not bytes. The length does NOT need to be a multiple of 8. val zeroes_bitstring : int -> bitstring zeroes_bitstring creates an n bit bitstring of all 0's. Actually this is the same as Bitstring.create_bitstring . val ones_bitstring : int -> bitstring ones_bitstring creates an n bit bitstring of all 1's. val bitstring_of_string : string -> bitstring bitstring_of_string str creates a bitstring of length String.length str * 8 (bits) containing the bits in str. Note that the bitstring uses str as the underlying string (see the representation of Bitstring.bitstring) so you should not change str after calling this. val bitstring_of_file : string -> bitstring bitstring_of_file filename loads the named file into a bitstring. val bitstring_of_chan : Pervasives.in_channel -> bitstring bitstring_of_chan chan loads the contents of the input channel chan as a bitstring. The length of the final bitstring is determined by the remaining input in chan, but will always be a multiple of 8 bits. See also Bitstring.bitstring_of_chan_max. val bitstring_of_chan_max : Pervasives.in_channel -> int -> bitstring bitstring_of_chan_max chan max works like Bitstring.bitstring_of_chan but will only read up to max bytes from the channel (or fewer if the end of input occurs before that). val bitstring_of_file_descr : Unix.file_descr -> bitstring bitstring_of_file_descr fd loads the contents of the file descriptor fd as a bitstring. See also Bitstring.bitstring_of_chan , Bitstring.bitstring_of_file_descr_max . val bitstring_of_file_descr_max : Unix.file_descr -> int -> bitstring bitstring_of_file_descr_max fd max works like Bitstring.bitstring_of_file_descr but will only read up to max bytes from the channel (or fewer if the end of input occurs before that).","title":"Constructing bitstrings"},{"location":"reference/#converting-bitstrings","text":"val string_of_bitstring : bitstring -> string string_of_bitstring bitstring converts a bitstring to a string (eg. to allow comparison). This function is inefficient. In the best case when the bitstring is nicely byte-aligned we do a String.sub operation. If the bitstring isn't aligned then this involves a lot of bit twiddling and is particularly inefficient. If the bitstring is not a multiple of 8 bits wide then the final byte of the string contains the high bits set to the remaining bits and the low bits set to 0. val bitstring_to_file : bitstring -> string -> unit bitstring_to_file bits filename writes the bitstring bits to the file filename. It overwrites the output file. Some restrictions apply, see Bitstring.bitstring_to_chan . val bitstring_to_chan : bitstring -> Pervasives.out_channel -> unit bitstring_to_file bits filename writes the bitstring bits to the channel chan. Channels are made up of bytes, bitstrings can be any bit length including fractions of bytes. So this function only works if the length of the bitstring is an exact multiple of 8 bits (otherwise it raises Invalid_argument \"bitstring_to_chan\" ). Furthermore the function is efficient only in the case where the bitstring is stored fully aligned, otherwise it has to do inefficient bit twiddling like Bitstring.string_of_bitstring . In the common case where the bitstring was generated by the BITSTRING operator and is an exact multiple of 8 bits wide, then this function will always work efficiently.","title":"Converting bitstrings"},{"location":"reference/#printing-bitstrings","text":"val hexdump_bitstring : Pervasives.out_channel -> bitstring -> unit hexdump_bitstring chan bitstring prints the bitstring to the output channel in a format similar to the Unix command hexdump -C .","title":"Printing bitstrings"},{"location":"reference/#bitstring-buffer","text":"module Buffer: sig .. end Buffers are mainly used by the BITSTRING constructor, but may also be useful for end users.","title":"Bitstring buffer"},{"location":"reference/#getset-bits","text":"These functions let you manipulate individual bits in the bitstring. However they are not particularly efficient and you should generally use the bitmatch and BITSTRING operators when building and parsing bitstrings. These functions all raise Invalid_argument \"index out of bounds\" if the index is out of range of the bitstring. val set : bitstring -> int -> unit set bits n sets the nth bit in the bitstring to 1. val clear : bitstring -> int -> unit clear bits n sets the nth bit in the bitstring to 0. val is_set : bitstring -> int -> bool is_set bits n is true if the nth bit is set to 1. val is_clear : bitstring -> int -> bool is_clear bits n is true if the nth bit is set to 0. val put : bitstring -> int -> int -> unit put bits n v sets the nth bit in the bitstring to 1 if v is not zero, or to 0 if v is zero. val get : bitstring -> int -> int get bits n returns the nth bit (returns non-zero or 0).","title":"Get/set bits"}]}